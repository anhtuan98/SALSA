1. Application description
Salsa uses Tosca for describing applications. An application is called a Tosca-Definition which contains a number of Service Template. In Salsa, a Service Template can be consider as an Atomic Service, which can be deployed separatedly. At the first prototype, SALSA supports deploying 1 Service Template.

A Service Template has a Topology Template which describes its abstract structure. Following the idea of Tosca, all application components are considered as Tosca-Nodes, or Node Template. Node Templates have dependencies to others, and be described via Relationship Template. 

For execute the deployment, each Tosca-Nodes will have a number of Deployment-Artifacts which point to the Artifact repositories of the Node materials.

These templates can be defined by other Tosca-Elements such as Node-Types, Relationship-Types, Artifact-Types, etc.

2. Extended Tosca for Salsa
As the property for NodeTemplate is Any, Salsa use some custom Properties for the description
2.1. SALSA NoteTemplate type: In the NodeTemplate, put an attribute as type="salsa:typeName". Currently, following type can be parsed:
 - salsa:software => for the executable and any artifacts
 - salsa:docker		=> default docker node
 - salsa:tomcat 	=> default tomcat node
 - salsa:os 			=> default VM with linux

2.2. SALSA Artifact node type: In the ArtifactTemplate, put an attribute as type="salsa:typeName". Currently SALSA support:
 - salsa:sh				=> bash script, using bash to execute the deployment script
 - salsa:war			=> war file, deploy the war file to the tomcat webapp folder
 - salsa:chef			=> using chef to install artifacts from chef community repository
 - salsa:chef-solo => using chef-solo to install a local cookbook
 - salsa:apt			=> using apt-get to install a local artifact
 
2.3. SALSA custom properties.
SALSA parse custom properties which are wrapped in a MappingProperties structure. Currently, 2 type of properties can be parsed:
 - salsa:os				=> properties to describe VM
 - salsa:action		=> properties to define custom actions, in simple a format.

2.3. Virtual Machine Node Properties
Below is an example of the custom VM Node deployment information Properties.
				<tosca:Properties>
           <MappingProperties>						
						<MappingProperty type="salsa:os">
							<property name="instanceType">000000960</property>
							<property name="provider">dsg@openstack</property> 
							<property name="baseImage">8f1428ac-f239-42e0-ab35-137f6e234101</property>
							<property name="packages">openjdk-7-jre</property>
						</MappingProperty>
					</MappingProperties>
        </tosca:Properties>


2.4. Relationship types
The relationships represent the order of deployment between nodes. In a relationship, the source node will be deploy before the target node.
There are two types of relationship between nodes.
 - salsa:HOSTON 		=> This represents one node will be deploy on top of other node. SALSA uses this to recognize the stack of deployment. Currently, SALSA have VM stack and software stack, which show the software is deployed on top of the VM.
 - salsa:CONNECTTO 	=> This represents the relationship between two software nodes. One node will waiting for other nodes to be deployed, then get the IP of that node. 
 - salsa:LOCAL			=> Two node will be deployed on the same target. E.g. two software will be hosted by single VM. This type is used only when "OS" node is not specified. This will be replaced by HOSTON relationship when SALSA processes the TOSCA.

4. Deployment BASH script
Each node will has a number of script related to deployment system actions (as described above). The deployment scripts can be written a BASH script. To solve the CONNECTTO relationship, where one node will send some values to other nodes, Salsa provide 2 command, which is available on all Salsa Vitual machine instance. This method support the components can transfer variables to others.
 - salsa-capability-set <capability ID> <value>
 - salsa-requirement-get <requirement ID>
These commands will set node's capability and get node's requirement. These value will be controlled and synchronized by Salsa Center, ensure the logic of the deployment.

For specific case of getting IP, on the value is send to the node which needs and is stored in global env variable. The script can get the IP by:
. /etc/environment
IP_VALUE=$<ID_OF_SOURCE_NODE>_IP
or: IP_VALUE=$<ID_OF_RELATIONSHIP>_IP

