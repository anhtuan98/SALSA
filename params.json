{"name":"SALSA","tagline":"A Framework for Dynamic Orchestration and Configuration Application on Multi-cloud","body":"# Abstract\r\nCloud computing technologies have been intensively exploited in development and management of distributed applications. Applications are constructed by different types of software, is deployed on multiple cloud providers, which have various ways to configure, and can change dynamically at runtime. Due to this complexity, we need a solution to reduce the configuration efforts by automating the complex tasks and providing fine-grained configuration features. In this paper, we introduce the concept of \\textit{multi-level configuration}, a novel approach for the configuration of complex applications on multi-cloud. Our solution enables the fine-grained configuration at different abstraction levels and support the dynamic change of applications at runtime.\r\n\r\n# Overview\r\nSALSA is a framework that provide automatic features for configuring and orchestrating distributed applications on multi-cloud system. SALSA can be used by application providers and application controllers to manage the application at deployment time and at runtime. The framework enables the configuration on different levels of application structure and deployment stacks, which provide fine-grained or full view about the application.\r\n![Information model](http://tuwiendsg.github.io/SALSA/images/informationModel.png)\r\nOn the application structure, SALSA supports the configuration on the whole application, group of components or a single component, which are represented by the cloud service, service topology, service unit and service instance. On the deployment stacks, SALSA supports the configuration on different stack, including the virtual machine, the application container (e.g. docker), the web container (e.g. Tomcat) and the application.\r\n\r\n# Example\r\n\r\n# Prototype\r\nIn order to use SALSA, user need to configure the followings:\r\n\r\n1. **Compile** the source and check two artifact: salsa-engine.war and salsa-pioneer-vm-0.0.1-SNAPSHOT-executable.jar.\r\n \r\n2. **Deploy** the .war file on a Tomcat server and copy the .jar to a public place to be able to access, e.g. on a HTTP server.\r\n\r\n3. **Configure SALSA parameter**: /etc/salsa.engine.properties. An example of this configuration is on the `salsa-engine/src/main/resources` folder. Most of the parameters can be left as default, except the URL of the RESTful service and link to the salsa-pioneer artifact.\r\n\r\n4. **Configure user parameter**: /etc/cloudUserParameters.ini. This file configure the parameter to access to cloud providers which users registered. At current version, SALSA supports single user, then we maintain one configuration file for the whole system. As the parameter are different between providers, please refer to the example in the `resources` folder.\r\n\r\n5. **Access to the web interface** at the URL: `http://<tomcatIP>:8080/salsa-engine`. On this page, user can upload a TOSCA and executes the first deployment of the application. The web interface provides basic deploy and undeploy operations on different level of application structure.\r\n\r\n6. ** Access to the API** at the URL `http://<tomcatIP>:8080/salsa-engine/rest` to have configuration features. The API can be referred on [salsa-common/interfaces pakage](https://github.com/tuwiendsg/SALSA/tree/master/salsa-core-pom/salsa-common/src/main/java/at/ac/tuwien/dsg/cloud/salsa/common/interfaces).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}